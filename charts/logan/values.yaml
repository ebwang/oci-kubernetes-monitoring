global:
  # Kubernetes Namespace in which the resources to be created. Set oci-kubernetes-monitoring-common:createNamespace set to true, if the namespace doesn't exist.
  namespace: oci-onm
  # Prefix to be attached to resources created through this chart. Not all resources may have this prefix.
  resourceNamePrefix: oci-onm

oci-onm-common:
  # By default, a cluster role, cluster role binding and serviceaccount will be created for the monitoring pods to be able to (readonly) access various objects within the cluster, to support collection of various telemetry data. You may set this to false and provide your own serviceaccount (in the parent chart(s)) which has the necessary cluster role(s) binded to it. Refer, README for the cluster role definition and other details.
  createServiceAccount: true
  # If createNamespace is set to true, it tries to create the namespace defined in 'namespace' variable.
  createNamespace: true
  # Kubernetes Namespace in which the serviceaccount to be created.
  namespace: "{{ .Values.global.namespace }}"
  # Prefix to be attached to resources created through this chart. Not all resources may have this prefix.
  resourceNamePrefix: "{{ .Values.global.resourceNamePrefix }}"
  # Name of the Kubernetes ServiceAccount
  serviceAccount: "{{ .Values.global.resourceNamePrefix }}"

# This value is to determine the runtime of k8s and change the configuration of fluentd accordingly
# Possible values are docker and cri(for OKE 1.20 and above)
runtime: cri
# Auth type to be used by oci fluentd output plugin to upload logs into logging analytics
# Possible values are InstancePrincipal and config
authtype: InstancePrincipal
# Kubernetes Namespace in which the resources defiend in this chart to be deployed.
namespace: "{{ .Values.global.namespace }}"
# Prefix to be attached to resources created through this chart. Not all resources may have this prefix.
resourceNamePrefix: "{{ .Values.global.resourceNamePrefix }}"
# Name of the Kubernetes ServiceAccount
serviceAccount: "{{ .Values.global.resourceNamePrefix }}"
image:
   # Replace this value with actual image pull secrets.
   # Make sure the secret is in the same namespace as specified above.
   imagePullSecrets:
   # Replace this value with actual docker image url
   url: container-registry.oracle.com/oci_observability_management/oci-la-fluentd-collector:1.0.0
   # Replace this value with desired value for image pull policy
   imagePullPolicy: Always
# Go to Logging Analytics Administration, click Service Details, and note the namespace value.
ociLANamespace:
# Logging Analytics Default Log Group OCID
ociLALogGroupID:
# Kubernetes Cluster OCID
kubernetesClusterID:
# Kubernetes Cluster NAME
kubernetesClusterName:

# Logging Analytics Default Entity OCID
#ociLAEntityID:

# Logging Analytics additional metadata. Use this to tag all the collected logs with one or more key:value pairs.
# Key must be a valid field in Logging Analytics
#metadata:
   #"Client Host Region": "PCT"
   #"Environment": "Production"
   #"Third key": "Third Value"

## @param extraEnv extra env variables. Below is an example env variable
##   - name: ENV_VARIABLE_NAME
##     value: ENV_VARIABLE_VALUE
extraEnv: []
## parameters to set requests and limits for memory and cpu
resources:
   limits:
      memory: 500Mi
   requests:
      cpu: 100m
      memory: 250Mi
## @param extraVolumes Extra volumes. Below is an example extra volume
##   - name: tmpDir
##     hostPath:
##         path: /tmp log
extraVolumes: []
## @param extraVolumeMounts Mount extra volume(s). Below is an example extra volume mount
##   - name: tmpDir
##     mountPath: /tmp
##
extraVolumeMounts: []
volumes:
   # This value is path to the pod logs in the host machine.
   # Replace this value with the actual path in your environment.
   podsHostPath: /var/log/pods
   # This value is path to the container data logs in the host machine.
   # Replace this value with the actual path in your environment.
   containerdataHostPath: /u01/data/docker/containers
## oci section is only required when config file based auth is used.
oci:
   # path to the config file
   path: /var/opt/.oci
   # config file name
   file: config
   configFiles:
      # config file data (https://docs.oracle.com/en-us/iaas/Content/API/Concepts/sdkconfig.htm)
      config: |-
         # Replace each of the below fields with actual values.
         [DEFAULT]
         user=<user ocid>
         fingerprint=<fingerprint>
         key_file=<key file path>
         tenancy=<tenancy ocid>
         region=<region>
      # private key file data
      private.pem: |-
         # Replace this private key with actual value.
         -----BEGIN RSA PRIVATE KEY-----
         XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
         -----END RSA PRIVATE KEY-----
# The collection frequency (in minutes) for Kubernetes Objects
objectsPollingFrequency: 5m
# The following section represents the Fluentd configuration.
fluentd:
   # path to the fluentd config file
   path: /var/opt/conf
   # fluentd config file name
   file: fluent.conf
   # Base directory on the node (with read write permission) to store fluentd plugins related data.
   baseDir: /var/log
   # Configuration for oci-logging-analytics output plugin
   ociLoggingAnalyticsOutputPlugin:
      profile_name: 'DEFAULT'
      # Output plugin logging level: DEBUG < INFO < WARN < ERROR < FATAL < UNKNOWN
      plugin_log_level: 'info'
      # The maximum log file size at which point the log file to be rotated, for example, 1KB, 1MB, etc.
      plugin_log_file_size: '10MB'
      # The number of archived or rotated log files to keep, must be non-zero.
      plugin_log_file_count: 10
      # Fluentd Buffer Configuration
      buffer:
         # The number of threads to flush or write chunks in parallel.
         flush_thread_count: 1
         # Once the total size of the stored buffer reaches this threshold, all the append operations will fail with error, and data will be lost.
         total_limit_size: '5368709120' # 5GB
         # The frequency of flushing the chunks to output plugin.
         flush_interval: 30 # seconds
         flush_thread_interval: 0.5 # seconds
         flush_thread_burst_interval: 0.05 # seconds
         # Wait in seconds before the next retry to flush.
         retry_wait: 2 # seconds
         # This is mandatory only when retry_forever field is false.
         retry_max_times: 17
         # Wait in seconds before the next constant factor of exponential backoff.
         retry_exponential_backoff_base: 2
         # If true, plugin will ignore retry_max_times option and retry flushing forever.
         retry_forever: true
         disable_chunk_backup: true

   # Configuration for kubernetes_metadata filter plugin (https://github.com/fabric8io/fluent-plugin-kubernetes_metadata_filter)
   kubernetesMetadataFilter:
      # URL to the API server. Set this to retrieve further kubernetes metadata for logs from kubernetes API server. If not specified, environment variables KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT will be used if both are present which is typically true when running fluentd in a pod.
      kubernetes_url:
      # Validate SSL certificates (default: true)
      verify_ssl: true
      # Path to CA file for Kubernetes server certificate validation
      ca_file:
      # Skip all label fields from the metadata.
      skip_labels: false
      # Skip the container fields container_image and container_image_id in the metadata.
      skip_container_metadata: false
      # Skip the master_url field from the metadata.
      skip_master_url: false
      # Skip the namespace_id field from the metadata. The fetch_namespace_metadata function will be skipped. The plugin will be faster and cpu consumption will be less.
      skip_namespace_metadata: false
      # Set up a watch on the pods on the API server for updates to metadata. By default, true.
      watch: true
   # Config for Logs Collection using tail plugin
   tailPlugin:
      # If true, starts to read the logs from the head of the file or the last read position recorded in pos_file
      readFromHead: true
      # Frequency of flushing the chunks to output plugin.
      flushInterval: 60 # seconds
      # Specifies the encoding of logs. By default, in_tail emits string value as ASCII-8BIT encoding. If encoding is specified, in_tail changes string to given encoding.
      # When encoding is set at this level, it gets applied to all the logs being collected. Instead, it can also be set at individual logs under sections like kubernetesSystem, genericContainerLogs, customLogs etc.
      # encoding: 
   # Configuration for Kubernetes System specific logs like Kube Flannel, Kube Proxy etc.
   kubernetesSystem:
      # Setting the following properties will override the default/generic configuration and applies to all Kubernetes system logs
      #ociLALogGroupID:
      #metadata:
         #"Client Host Region": "America"
         #"Environment": "Production"
         #"Third Key": "Third Value"
      #ociLAEntityID:
      #encoding:
      logs:
         # Configuration specific to Kube Proxy logs
         kube-proxy:
            # Log file location.
            path: /var/log/containers/kube-proxy-*.log
            # Logging Analytics log source to use for parsing and processing the logs: Kubernetes Proxy Logs.
            ociLALogSourceName: "Kubernetes Proxy Logs"
            # The regular expression pattern for the starting line in case of multi-line logs.
            multilineStartRegExp: /^\S\d{2}\d{2}\s+[^\:]+:[^\:]+:[^\.]+\.\d{0,3}/
            #metadata:
               #"Client Host Region": "America"
               #"Environment": "Production"
               #"Third Key": "Third Value"
            #ociLAEntityID:
            #ociLALogGroupID:
            #encoding:

         # Configuration specific to Kube Flannel logs
         kube-flannel:
            # The path to the source files.
            path: /var/log/containers/kube-flannel-*.log
            # Logging Analytics log source to use for parsing and processing the logs: Kubernetes Flannel Logs.
            ociLALogSourceName: "Kubernetes Flannel Logs"
            # The regular expression pattern for the starting line in case of multi-line logs.
            multilineStartRegExp: /^\S\d{2}\d{2}\s+[^\:]+:[^\:]+:[^\.]+\.\d{0,3}/

         # Configuration specific to Kubernetes DNS Autoscaler Logs
         kube-dns-autoscaler:
            path: /var/log/containers/kube-dns-autoscaler-*.log
            # Logging Analytics log source to use for parsing and processing the logs: Kubernetes DNS Autoscaler Logs.
            ociLALogSourceName: "Kubernetes DNS Autoscaler Logs"
            # The regular expression pattern for the starting line in case of multi-line logs.
            multilineStartRegExp: /^\S\d{2}\d{2}\s+[^\:]+:[^\:]+:[^\.]+\.\d{0,3}/

         # Configuration specific to Kubernetes Core DNS Logs
         coredns:
            # The path to the source files.
            path: /var/log/containers/coredns-*.log
            # Logging Analytics log source to use for parsing and processing the logs: Kubernetes Core DNS Logs.
            ociLALogSourceName: "Kubernetes Core DNS Logs"
            # The regular expression pattern for the starting line in case of multi-line logs.
            multilineStartRegExp: /^\[[^\]]+\]\s+/

         # Configuration specific to Kubernetes CSI Node Driver Logs
         csinode:
            # The path to the source files.
            path: /var/log/containers/csi-oci-node-*.log
            # Logging Analytics log source to use for parsing and processing the logs: Kubernetes CSI Node Driver Logs.
            ociLALogSourceName: "Kubernetes CSI Node Driver Logs"

         # Configuration specific to Proxymux Client Logs
         proxymux:
            # The path to the source files.
            path: /var/log/containers/proxymux-client-*.log
            # Logging Analytics log source to use for parsing and processing the logs: OKE Proxymux Client Logs.
            ociLALogSourceName: "OKE Proxymux Client Logs"

         # Configuration specific to Kubernetes Autoscaler Logs
         cluster-autoscaler:
            # The path to the source files.
            path: /var/log/containers/cluster-autoscaler-*.log
            # Logging Analytics log source to use for parsing and processing the logs: Kubernetes Autoscaler Logs.
            ociLALogSourceName: "Kubernetes Autoscaler Logs"
            # The regular expression pattern for the starting line in case of multi-line logs.
            multilineStartRegExp: /^\S\d{2}\d{2}\s+[^\:]+:[^\:]+:[^\.]+\.\d{0,3}/
   # Configuration for Linux System specific logs like CronLogs and SecureLogs
   linuxSystem:
      logs:
         cronlog:
            # The path to the source files.
            path: /var/log/cron*
            # Logging Analytics log source to use for parsing and processing the logs: Linux Cron Logs.
            ociLALogSourceName: "Linux Cron Logs"
            # The regular expression pattern for the starting line in case of multi-line logs.
            multilineStartRegExp: /^(?:(?:\d+\s+)?<([^>]*)>(?:\d+\s+)?)?\S+\s+\d{1,2}\s+\d{1,2}:\d{1,2}:\d{1,2}\s+/

         securelog:
            # The path to the source files.
            path: /var/log/secure*
            # Logging Analytics log source to use for parsing and processing the logs: Linux Secure Logs.
            ociLALogSourceName: "Linux Secure Logs"
            # The regular expression pattern for the starting line in case of multi-line logs.
            multilineStartRegExp: /^(?:(?:\d+\s+)?<([^>]*)>(?:\d+\s+)?)?\S+\s+\d{1,2}\s+\d{1,2}:\d{1,2}:\d{1,2}\s+/

         kubeletlog:
            # Logging Analytics log source to use for parsing and processing the logs: Kubernetes Kubelet Logs.
            ociLALogSourceName: "Kubernetes Kubelet Logs"

         syslog:
            # The path to the source files.
            path: /var/log/messages*
            # Logging Analytics log source to use for parsing and processing the logs: Linux Syslog Logs.
            ociLALogSourceName: "Linux Syslog Logs"
            # The regular expression pattern for the starting line in case of multi-line logs.
            multilineStartRegExp: /^(?:(?:\d+\s+)?<([^>]*)>(?:\d+\s+)?)?\S+\s+\d{1,2}\s+\d{1,2}:\d{1,2}:\d{1,2}\s+/

         maillog:
            # The path to the source files.
            path: /var/log/maillog*
            # Logging Analytics log source to use for parsing and processing the logs: Linux Mail Delivery Logs.
            ociLALogSourceName: "Linux Mail Delivery Logs"
            # The regular expression pattern for the starting line in case of multi-line logs.
            multilineStartRegExp: /^(?:(?:\d+\s+)?<([^>]*)>(?:\d+\s+)?)?\S+\s+\d{1,2}\s+\d{1,2}:\d{1,2}:\d{1,2}\s+/

         linuxauditlog:
            # The path to the source files.
            path: /var/log/audit/audit*
            # Logging Analytics log source to use for parsing and processing the logs: Linux Audit Logs.
            ociLALogSourceName: "Linux Audit Logs"

         uptracklog:
            # The path to the source files.
            path: /var/log/uptrack*
            # Logging Analytics log source to use for parsing and processing the logs: ksplice Logs.
            ociLALogSourceName: "Ksplice Logs"
            # The regular expression pattern for the starting line in case of multi-line logs.
            multilineStartRegExp: /^\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}/

         yum:
            # The path to the source files.
            path: /var/log/yum.log*
            # Logging Analytics log source to use for parsing and processing the logs: Linux YUM Logs.
            ociLALogSourceName: "Linux YUM Logs"

   # Generic configuration for all container/pod logs
   genericContainerLogs:
      # Logging Analytics log source to use for parsing and processing the logs: Kubernetes Container Generic Logs.
      ociLALogSourceName: "Kubernetes Container Generic Logs"
      path: /var/log/containers/*.log
      # List of log paths to exclude that are already part of other specific configurations defined (like Kube Proxy, Kube Flannel)
      # If you want to create a custom configuration for any of the container logs using the customLogs section, then exclude the corresponding log path here.
      exclude_path:
         - '"/var/log/containers/kube-proxy-*.log"'
         - '"/var/log/containers/kube-flannel-*.log"'
         - '"/var/log/containers/kube-dns-autoscaler-*.log"'
         - '"/var/log/containers/coredns-*.log"'
         - '"/var/log/containers/csi-oci-node-*.log"'
         - '"/var/log/containers/proxymux-client-*.log"'
         - '"/var/log/containers/cluster-autoscaler-*.log"'

   # Configuration for any custom logs which are not part of the default configuration defined in this file.
   # All the pod/container logs will be collected using "genericContainerLogs" section.
   # Use this section to create a custom configuration for any of the container logs.
   # Also, you can use this section to define configuration for any other log path existing on a Kubernetes worker node
   customLogs:
      # A unique identifier to represent the configuration for a single log path
      #custom-id1:
         #path: /var/log/containers/custom*.log
         # Logging Analytics log source to use for parsing and processing the logs:
         #ociLALogSourceName: "Custom1 Logs"
         # The regular expression pattern for the starting line in case of multi-line logs.
         #multilineStartRegExp:
         # Set isContainerLog to false if the log is not a container log (/var/log/containers/*.log). Default value is true.
         #isContainerLog: true
      #custom-id2:
         #path: /var/log/custom/*.log
         # Logging Analytics log source to use for parsing and processing the logs:
         #ociLALogSourceName: "Custom2 Logs"
         # The regular expression pattern for the starting line in case of multi-line logs.
         #multilineStartRegExp:
         # Set isContainerLog to false if the log is not a container log (/var/log/containers/*.log). Default value is true.
         #isContainerLog: false

   # Alternative approach to define the configuration for any custom logs which are not part of the default configuration defined in this file.
   # Provide the Fluentd configuration with the source and filter sections for your custom logs in this section. Exclude the match section. It would be used without any modification.
   # Notes:
      # Ensure that @id in the source section is unique and does not collide with any default configuration defined in this file
      # Tag must start with "oci." and must be unique.
      # In case of container log (/var/log/containers/*.log), exclude the corresponding log path in "genericContainerLogs" section.
   customFluentdConf: |

   # Configuration for collecting Kubernetes Object information.
   # Supported objects are Node, Pod, Namespace, Event, DaemonSet, ReplicaSet, Deployment, StatefulSet, Job, CronJob
   kubernetesObjects:
      #metadata:
         #"Client Host Region": "America"
         #"Environment": "Production"
         #"Third Key": "Third Value"
      #ociLAEntityID:
      #ociLALogGroupID:
      objectsList: 
         nodes:
            #api_version: v1 (default)
            #api_endpoint: "" (default)
         pods:
         namespaces:
         events:
         daemon_sets:
            api_endpoint: apis/apps
         replica_sets:
            api_endpoint: apis/apps
         deployments:
            api_endpoint: apis/apps
         stateful_sets:
            api_endpoint: apis/apps
         jobs:
            api_endpoint: apis/batch
         cron_jobs:
            api_endpoint: apis/batch
